// Script para ativar o usu√°rio testedesistema01@gmail.com
// Execute este script no console do navegador (F12 -> Console)

async function ativarUsuario(email) {
  try {
    console.log('üîß Iniciando ativa√ß√£o do usu√°rio:', email);
    
    // 1. Verificar se o usu√°rio existe
    const { data: profile, error: profileError } = await supabase
      .from('profiles')
      .select('*')
      .eq('email', email)
      .single();
    
    if (profileError) {
      if (profileError.code === 'PGRST116') {
        console.log('‚ùå Usu√°rio n√£o encontrado:', email);
        return;
      }
      throw profileError;
    }
    
    console.log('‚úÖ Usu√°rio encontrado:', profile);
    
    // 2. Ativar o usu√°rio
    const { data: updatedProfile, error: updateError } = await supabase
      .from('profiles')
      .update({
        account_status: 'active',
        approved_at: new Date().toISOString(),
        approved_by: (await supabase.auth.getUser()).data.user?.id,
        frozen_at: null,
        frozen_by: null
      })
      .eq('email', email)
      .select()
      .single();
    
    if (updateError) {
      console.error('‚ùå Erro ao ativar usu√°rio:', updateError);
      return;
    }
    
    console.log('‚úÖ Usu√°rio ativado com sucesso:', updatedProfile);
    
    // 3. Verificar condom√≠nios existentes
    const { data: condominiums, error: condError } = await supabase
      .from('condominiums')
      .select('*')
      .order('created_at');
    
    if (condError) {
      console.error('‚ùå Erro ao buscar condom√≠nios:', condError);
    } else {
      console.log('üìã Condom√≠nios encontrados:', condominiums?.length || 0);
    }
    
    // 4. Associar condom√≠nios sem user_id ao usu√°rio ativado
    const { data: updatedCondominiums, error: condUpdateError } = await supabase
      .from('condominiums')
      .update({ user_id: profile.id })
      .is('user_id', null)
      .select();
    
    if (condUpdateError) {
      console.error('‚ùå Erro ao associar condom√≠nios:', condUpdateError);
    } else if (updatedCondominiums && updatedCondominiums.length > 0) {
      console.log('‚úÖ Condom√≠nios associados:', updatedCondominiums.length);
    }
    
    // 5. Verificar vigilantes
    const { data: vigilantes, error: vigError } = await supabase
      .from('vigilantes')
      .select(`
        *,
        condominiums!inner(
          id,
          name,
          user_id
        )
      `)
      .eq('condominiums.user_id', profile.id);
    
    if (vigError) {
      console.error('‚ùå Erro ao buscar vigilantes:', vigError);
    } else {
      console.log('üëÆ Vigilantes do usu√°rio:', vigilantes?.length || 0);
    }
    
    // 6. Verificar motos
    const { data: motorcycles, error: motoError } = await supabase
      .from('motorcycles')
      .select(`
        *,
        condominiums!inner(
          id,
          name,
          user_id
        )
      `)
      .eq('condominiums.user_id', profile.id);
    
    if (motoError) {
      console.error('‚ùå Erro ao buscar motos:', motoError);
    } else {
      console.log('üèçÔ∏è Motos do usu√°rio:', motorcycles?.length || 0);
    }
    
    // 7. Resumo final
    console.log('üéâ Ativa√ß√£o conclu√≠da!');
    console.log('üìä Resumo:');
    console.log(`   - Usu√°rio: ${email}`);
    console.log(`   - Status: ${updatedProfile.account_status}`);
    console.log(`   - Condom√≠nios: ${updatedCondominiums?.length || 0} associados`);
    console.log(`   - Vigilantes: ${vigilantes?.length || 0} encontrados`);
    console.log(`   - Motos: ${motorcycles?.length || 0} encontradas`);
    
    // 8. Mostrar detalhes dos condom√≠nios associados
    const { data: userCondominiums, error: userCondError } = await supabase
      .from('condominiums')
      .select('*')
      .eq('user_id', profile.id);
    
    if (!userCondError && userCondominiums) {
      console.log('üè¢ Condom√≠nios do usu√°rio:');
      userCondominiums.forEach(cond => {
        console.log(`   - ${cond.name} (${cond.address})`);
      });
    }
    
    return {
      profile: updatedProfile,
      condominiums: userCondominiums,
      vigilantes,
      motorcycles
    };
    
  } catch (error) {
    console.error('üí• Erro geral:', error);
    return null;
  }
}

// Fun√ß√£o para verificar o status atual
async function verificarStatus(email) {
  try {
    console.log('üîç Verificando status do usu√°rio:', email);
    
    const { data: profile, error } = await supabase
      .from('profiles')
      .select('*')
      .eq('email', email)
      .single();
    
    if (error) {
      console.log('‚ùå Usu√°rio n√£o encontrado');
      return;
    }
    
    console.log('üìã Status atual:');
    console.log(`   - Email: ${profile.email}`);
    console.log(`   - Nome: ${profile.full_name || 'N√£o informado'}`);
    console.log(`   - Status: ${profile.account_status}`);
    console.log(`   - Admin: ${profile.is_admin ? 'Sim' : 'N√£o'}`);
    console.log(`   - Criado em: ${new Date(profile.created_at).toLocaleString('pt-BR')}`);
    
    if (profile.approved_at) {
      console.log(`   - Aprovado em: ${new Date(profile.approved_at).toLocaleString('pt-BR')}`);
    }
    
    if (profile.frozen_at) {
      console.log(`   - Bloqueado em: ${new Date(profile.frozen_at).toLocaleString('pt-BR')}`);
    }
    
    return profile;
  } catch (error) {
    console.error('üí• Erro ao verificar status:', error);
  }
}

// Executar ativa√ß√£o
console.log('üöÄ Iniciando processo de ativa√ß√£o...');
ativarUsuario('testedesistema01@gmail.com');

// Para verificar o status antes/depois, execute:
// verificarStatus('testedesistema01@gmail.com'); 