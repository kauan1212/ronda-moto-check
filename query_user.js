// Script para consultar o usu√°rio com email: testedesistema01@gmail.com
// Execute este script no console do navegador (F12 -> Console)

// Fun√ß√£o para consultar usu√°rio por email
async function queryUserByEmail(email) {
  try {
    console.log('üîç Consultando usu√°rio com email:', email);
    
    // Consultar na tabela profiles
    const { data: profile, error: profileError } = await supabase
      .from('profiles')
      .select('*')
      .eq('email', email)
      .single();
    
    if (profileError) {
      console.log('‚ùå Erro ao consultar perfil:', profileError);
      if (profileError.code === 'PGRST116') {
        console.log('‚ÑπÔ∏è Usu√°rio n√£o encontrado na tabela profiles');
      }
    } else {
      console.log('‚úÖ Perfil encontrado:', profile);
    }
    
    // Consultar na tabela auth.users (requer permiss√µes de admin)
    try {
      const { data: authUser, error: authError } = await supabase.auth.admin.getUserByEmail(email);
      
      if (authError) {
        console.log('‚ùå Erro ao consultar auth.users:', authError);
      } else {
        console.log('‚úÖ Usu√°rio auth encontrado:', authUser);
      }
    } catch (adminError) {
      console.log('‚ö†Ô∏è N√£o foi poss√≠vel consultar auth.users (requer permiss√µes de admin):', adminError.message);
    }
    
    // Consultar roles do usu√°rio
    if (profile) {
      const { data: roles, error: rolesError } = await supabase
        .from('user_roles')
        .select('*')
        .eq('user_id', profile.id);
      
      if (rolesError) {
        console.log('‚ùå Erro ao consultar roles:', rolesError);
      } else {
        console.log('‚úÖ Roles do usu√°rio:', roles);
      }
    }
    
    return { profile, authUser: null, roles: null };
    
  } catch (error) {
    console.error('üí• Erro geral:', error);
    return null;
  }
}

// Executar a consulta
queryUserByEmail('testedesistema01@gmail.com'); 